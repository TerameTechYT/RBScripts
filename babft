local Build = game.Players.LocalPlayer.Backpack.BuildingTool:FindFirstChild("RF");
local Paint = game.Players.LocalPlayer.Backpack.PaintingTool:FindFirstChild("RF");
local Scale = game.Players.LocalPlayer.Backpack.ScalingTool:FindFirstChild("RF");
local InsertService = game:GetService("InsertService")
local modelId = _G.modelId
if modelId ~= nil then
	local Model = game:GetObjects('rbxassetid://'..modelId)[1]
	if Model:IsA("Model") then
		Model:MoveTo(Vector3.new(0,0,0))
	end
end
local HighlightMode = _G.HighlightMode
local BlockToChoose = "WoodBlock"
local ScalePart

workspace.ChildAdded:Connect(function(child)
	if child:WaitForChild("Tag").Value == game.Players.LocalPlayer.Name then
		ScalePart = child
        print(ScalePart.PPart.CFrame)
	end
end)

if HighlightMode then
	for i = 1, #_G.ManualTable["Position"] do
		if _G.stop then
			_G.stop = false
			break
		end
        wait(_G.interval)
        coroutine.wrap(function()
        	local whiteBase = CFrame.new(_G.ManualTable["Position"][i] + Vector3.new(0,5,0))
		    if _G.UseBlobsPos == true then
		    	whiteBase = CFrame.new(_G.ManualTable["Position"][i] + Vector3.new(1.2,81.2,-3)) 
		    end
		    whiteBase *= CFrame.Angles(math.rad(_G.ManualTable["Rotation"][i].X), math.rad(_G.ManualTable["Rotation"][i].Y), math.rad(_G.ManualTable["Rotation"][i].Z))
            BlockToChoose = _G.MaterialList[_G.ManualTable["Material"][i]]
			if _G.useOneBlock then
		  		BlockToChoose = _G.MaterialList["Single"]
			end
		    Build:InvokeServer(BlockToChoose, game.Players.LocalPlayer.Data:FindFirstChild(BlockToChoose).Value, workspace:FindFirstChild(tostring(game.Players.LocalPlayer.TeamColor).."Zone"), whiteBase, true);
            coroutine.wrap(function()
                Scale:InvokeServer(ScalePart, _G.ManualTable["Size"][i], ScalePart.PPart.CFrame)
            end)()
            Paint:InvokeServer({{ScalePart, _G.ManualTable["Color"][i]}})
        end)()
	end
else
	for i,v in pairs(Model:GetDescendants()) do
		if _G.stop then
			_G.stop = false
			break
		end
		if v:IsA("Part") then
            wait(_G.interval)
            coroutine.wrap(function()
            	local whiteBase = CFrame.new(v.Position + Vector3.new(0,5,0))
			    if _G.UseBlobsPos == true then
				    whiteBase = CFrame.new(BlobOld + v.Position)
			    end
			    whiteBase *= CFrame.Angles(math.rad(v.Rotation.X), math.rad(v.Rotation.Y), math.rad(v.Rotation.Z))
			    BlockToChoose = _G.MaterialList[v.Material]
			    if _G.useOneBlock then
			   		BlockToChoose = _G.MaterialList["Single"]
			    end
			    Build:InvokeServer(BlockToChoose, game.Players.LocalPlayer.Data:FindFirstChild(BlockToChoose).Value, workspace:FindFirstChild(tostring(game.Players.LocalPlayer.TeamColor).."Zone"), whiteBase, true);
                coroutine.wrap(function()
                    Scale:InvokeServer(ScalePart, v.Size, ScalePart:FindFirstChild("PPart").CFrame)
                end)()
                Paint:InvokeServer({{ScalePart, v.Color}})
            end)()
		end
	end
end

if Model then
	Model:Destroy()
end
