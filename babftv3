local Build = game.Players.LocalPlayer.Backpack.BuildingTool:FindFirstChild("RF");
local Paint = game.Players.LocalPlayer.Backpack.PaintingTool:FindFirstChild("RF");
local Scale = game.Players.LocalPlayer.Backpack.ScalingTool:FindFirstChild("RF");
local InsertService = game:GetService("InsertService")
local modelId = getgenv().modelId
local MaterialList = getgenv().MaterialList
local Interval = getgenv().interval
local UseSingle = getgenv().useOneBlock
local Model

if modelId ~= nil then
	Model = game:GetObjects('rbxassetid://'..modelId)[1]
	if Model:IsA("Model") then
		Model:PivotTo(CFrame.new(0, 0, 0))
	end
end

local Mode = getgenv().Mode
local BlockToChoose = "WoodBlock"
local Parts = {}
local Cyl = {}
local List = getgenv().ManualTable
local found = false
for i,c in pairs(getconnections(workspace.ChildAdded)) do
    c:Disconnect()
end

workspace.ChildAdded:Connect(function(possibleBlock)
	wait()
	if possibleBlock:FindFirstChild("Tag") and possibleBlock.Tag.Value == game.Players.LocalPlayer.Name and possibleBlock:FindFirstChild("PPart") then
		table.insert(Parts, {possibleBlock})
        print("Added your part")
        found = true
	end
end)

if Mode == "manual" then
    wait(Interval)
    for index = 1, #List["Position"] do
        local PartPosition = List["Position"][index]
        local PartSize = List["Size"][index]
        local PartColor = List["Color"][index]
        local PartClass = List["Class"][index]
        local PartRotation = List["Rotation"][index]
        local PartMaterial = List["Material"][index]
        local PartShape = List["Shape"][index]
        local wedgeAngle = math.atan(PartSize.Y / PartSize.Z)
        local angledSurfaceLength = math.sqrt(PartSize.Y ^ 2 + PartSize.Z ^ 2)
        local PositionToPlace = CFrame.new(PartPosition)

        if getgenv().UseBlobsPos == true then
            PositionToPlace = CFrame.new(PartPosition + Vector3.new(1.2,81.2,-3)) 
        end
        local wedgeSize = Vector3.new(PartSize.X, 1, angledSurfaceLength)
        if PartClass == "Part" then
            PositionToPlace *= CFrame.Angles(math.rad(PartRotation.X), math.rad(PartRotation.Y), math.rad(PartRotation.Z))
        elseif PartClass == "WedgePart" then
            PositionToPlace *= CFrame.Angles(-wedgeAngle + math.rad(PartRotation.X), math.rad(PartRotation.Y), math.rad(PartRotation.Z))
        else
            PositionToPlace *= CFrame.Angles(math.rad(PartRotation.X), math.rad(PartRotation.Y), math.rad(PartRotation.Z))
        end
        
        BlockToChoose = MaterialList[PartMaterial]
        if UseSingle then
            BlockToChoose = MaterialList["Single"]
        end

        local PartCount = game.Players.LocalPlayer.Data:FindFirstChild(BlockToChoose).Value
        if game.Players.LocalPlayer.Settings.ShareBlocks.Value then
            PartCount = game.Players:FindFirstChild(game.Players.LocalPlayer.Team.TeamLeader.Value).Data:FindFirstChild(BlockToChoose).Value
        end

        if PartShape == Enum.PartType.Block then
            coroutine.wrap(function()
                Build:InvokeServer(BlockToChoose, PartCount, workspace:FindFirstChild(tostring(game.Players.LocalPlayer.TeamColor).."Zone"), PositionToPlace, true, 1);
            end)()
            found = false
            repeat wait() until found
            if PartClass == "Part" then
               table.insert(Parts[#Parts], {PartSize, PartColor})       
            elseif PartClass == "WedgePart" then
                table.insert(Parts[#Parts], {wedgeSize, PartColor})
            else
               table.insert(Parts[#Parts], {PartSize, PartColor})
            end
        elseif PartShape == Enum.PartType.Cylinder then
            local cylinderRadius = math.max(PartSize.X, PartSize.Y, PartSize.Z)
            local cylinderHeight = PartSize.X
            local cylinderSides = getgenv().cylinderQuality or 24
            local partThickness = 1 * cylinderRadius / 2.5
            local angleStep = 360 / cylinderSides

            for i = 1, cylinderSides do
                local CylSize = Vector3.new(partThickness, cylinderHeight, cylinderRadius * 2)
                local CylPos = CFrame.new(Vector3.new(PositionToPlace.X, PositionToPlace.Y, cylinderRadius + PositionToPlace.Z)) * CFrame.Angles(math.rad(PartRotation.X + 90), math.rad((i-1) * angleStep + PartRotation.Y), math.rad(PartRotation.Z))
                coroutine.wrap(function()
                    Build:InvokeServer(BlockToChoose, PartCount, workspace:FindFirstChild(tostring(game.Players.LocalPlayer.TeamColor).."Zone"), CylPos, true, 1);
                end)()
                found = false
                repeat wait() until found
                table.insert(Parts[#Parts], {CylSize, PartColor})
            end
        end
    end
    print("Scaling and painting next!")
    wait()
    print("Scaling and painting!")
    for i = 1, #Parts do
        local Part = Parts[i][1]
        local Size = Parts[i][2][1]
        local Color = Parts[i][2][2]
        coroutine.wrap(function()
            coroutine.wrap(function()
                Scale:InvokeServer(Part, Size, Part.PPart.CFrame)
            end)()
            Paint:InvokeServer({{Part, Color}})
        end)()
    end
elseif Mode == "model" then
    for i,possibleBlock in pairs(Model:GetDescendants()) do
        wait(Interval)
        if possibleBlock.ClassName == "Part" or possibleBlock.ClassName == "WedgePart" then
            local PartPosition = possibleBlock.Position
            local PartSize = possibleBlock.Size
            local PartColor = possibleBlock.Color
            local PartClass = possibleBlock.ClassName
            local PartRotation = possibleBlock.Rotation
            local PartMaterial = possibleBlock.Material
            local PartShape = possibleBlock.Shape
            local wedgeAngle = math.atan(PartSize.Y / PartSize.Z)
            local angledSurfaceLength = math.sqrt(PartSize.Y ^ 2 + PartSize.Z ^ 2)
            local PositionToPlace = CFrame.new(PartPosition)


            if getgenv().UseBlobsPos == true then
                PositionToPlace = CFrame.new(PartPosition + Vector3.new(1.2,81.2,-3)) 
            end
            local wedgeSize = Vector3.new(PartSize.X, 1, angledSurfaceLength)
            if PartClass == "Part" then
                PositionToPlace *= CFrame.Angles(math.rad(PartRotation.X), math.rad(PartRotation.Y), math.rad(PartRotation.Z))
            elseif PartClass == "WedgePart" then
                PositionToPlace *= CFrame.Angles(-wedgeAngle + math.rad(PartRotation.X), math.rad(PartRotation.Y), math.rad(PartRotation.Z))
            else
                PositionToPlace *= CFrame.Angles(math.rad(PartRotation.X), math.rad(PartRotation.Y), math.rad(PartRotation.Z))
            end
            
            BlockToChoose = MaterialList[PartMaterial]
            if UseSingle then
                BlockToChoose = MaterialList["Single"]
            end
    
            local PartCount = game.Players.LocalPlayer.Data:FindFirstChild(BlockToChoose).Value
            if game.Players.LocalPlayer.Settings.ShareBlocks.Value then
                PartCount = game.Players:FindFirstChild(game.Players.LocalPlayer.Team.TeamLeader.Value).Data:FindFirstChild(BlockToChoose).Value
            end
    
            if PartShape == Enum.PartType.Block then
                coroutine.wrap(function()
                    Build:InvokeServer(BlockToChoose, PartCount, workspace:FindFirstChild(tostring(game.Players.LocalPlayer.TeamColor).."Zone"), PositionToPlace, true, 1);
                end)()
                found = false
                repeat wait() until found
                if PartClass == "Part" then
                   table.insert(Parts[#Parts], {PartSize, PartColor})       
                elseif PartClass == "WedgePart" then
                    table.insert(Parts[#Parts], {wedgeSize, PartColor})
                else
                   table.insert(Parts[#Parts], {PartSize, PartColor})
                end
            elseif PartShape == Enum.PartType.Cylinder then
                local cylinderRadius = math.max(PartSize.X, PartSize.Y, PartSize.Z)
                local cylinderHeight = PartSize.X
                local cylinderSides = getgenv().cylinderQuality or 24
                local partThickness = 1 * cylinderRadius / 2.5
                local angleStep = 360 / cylinderSides
    
                for i = 1, cylinderSides do
                    local CylSize = Vector3.new(partThickness, cylinderHeight, cylinderRadius * 2)
                    local CylPos = CFrame.new(Vector3.new(PositionToPlace.X, PositionToPlace.Y, cylinderRadius + PositionToPlace.Z)) * CFrame.Angles(math.rad(PartRotation.X + 90), math.rad((i-1) * angleStep + PartRotation.Y), math.rad(PartRotation.Z))
                    coroutine.wrap(function()
                        Build:InvokeServer(BlockToChoose, PartCount, workspace:FindFirstChild(tostring(game.Players.LocalPlayer.TeamColor).."Zone"), CylPos, true, 1);
                    end)()
                    found = false
                    repeat wait() until found
                    table.insert(Parts[#Parts], {CylSize, PartColor})
                end
            end
    end
    wait(1)
    for i = 1, #Parts do
        local Part = PartStuff[i][1]
        local Size = PartStuff[i][2][1]
        local Color = PartStuff[i][2][2]
        coroutine.wrap(function()
            coroutine.wrap(function()
                Scale:InvokeServer(Part, Size, Part.PPart.CFrame)
            end)()
            Paint:InvokeServer({{Part, Color}})
        end)()
    end
elseif Mode == "copy" then

else
    warn("No mode selected!")
end

getgenv().currentlyBuilding = false

if Model then
	Model:Destroy()
end 