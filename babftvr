local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
if not getgenv().Network then
	getgenv().Network = {
		BaseParts = {};
		FakeConnections = {};
		Connections = {};
		Output = {
			Enabled = true;
			Prefix = "[NETWORK BYPASS] ";
			Send = function(Type,Output,BypassOutput)
				if typeof(Type) == "function" and (Type == print or Type == warn or Type == error) and typeof(Output) == "string" and (typeof(BypassOutput) == "nil" or typeof(BypassOutput) == "boolean") then
					if Network["Output"].Enabled == true or BypassOutput == true then
						Type(Network["Output"].Prefix..Output);
					end;
				elseif Network["Output"].Enabled == true then
					error(Network["Output"].Prefix.."Output Send Error : Invalid syntax.");
				end;
			end;
		};
		CharacterRelative = false;
	}
	Network["Output"].Send(print,": Loading.")
	Network["Velocity"] = Vector3.new(14.46262424,14.46262424,14.46262424); --exactly 25.1 magnitude
	Network["RetainPart"] = function(Part,ReturnFakePart) --function for retaining ownership of unanchored parts
		assert(typeof(Part) == "Instance" and Part:IsA("BasePart") and Part:IsDescendantOf(workspace),Network["Output"].Prefix.."RetainPart Error : Invalid syntax: Arg1 (Part) must be a BasePart which is a descendant of workspace.")
		assert(typeof(ReturnFakePart) == "boolean" or typeof(ReturnFakePart) == "nil",Network["Output"].Prefix.."RetainPart Error : Invalid syntax: Arg2 (ReturnFakePart) must be a boolean or nil.")
		if not table.find(Network["BaseParts"],Part) then
			if Network.CharacterRelative == true then
				local Character = LocalPlayer.Character
				if Character and Character.PrimaryPart then
					local Distance = (Character.PrimaryPart.Position-Part.Position).Magnitude
					if Distance > 1000 then
						Network["Output"].Send(warn,"RetainPart Warning : PartOwnership not applied to BasePart "..Part:GetFullName()..", as it is more than "..gethiddenproperty(LocalPlayer,"MaximumSimulationRadius").." studs away.")
						return false
					end
				else
					Network["Output"].Send(warn,"RetainPart Warning : PartOwnership not applied to BasePart "..Part:GetFullName()..", as the LocalPlayer Character's PrimaryPart does not exist.")
					return false
				end
			end
			table.insert(Network["BaseParts"],Part)
			Part.CustomPhysicalProperties = PhysicalProperties.new(0,0,0,0,0)
			Network["Output"].Send(print,"PartOwnership Output : PartOwnership applied to BasePart "..Part:GetFullName()..".")
			if ReturnFakePart == true then
				return FakePart
			end
		else
			Network["Output"].Send(warn,"RetainPart Warning : PartOwnership not applied to BasePart "..Part:GetFullName()..", as it already active.")
			return false
		end
	end
	Network["RemovePart"] = function(Part) --function for removing ownership of unanchored part
		assert(typeof(Part) == "Instance" and Part:IsA("BasePart"),Network["Output"].Prefix.."RemovePart Error : Invalid syntax: Arg1 (Part) must be a BasePart.")
		local Index = table.find(Network["BaseParts"],Part)
		if Index then
			table.remove(Network["BaseParts"],Index)
			Network["Output"].Send(print,"RemovePart Output: PartOwnership removed from BasePart "..Part:GetFullName()..".")
		else
			Network["Output"].Send(warn,"RemovePart Warning : BasePart "..Part:GetFullName().." not found in BaseParts table.")
		end
	end
	Network["SuperStepper"] = Instance.new("BindableEvent") --make super fast event to connect to
	for _,Event in pairs({RunService.Stepped,RunService.Heartbeat}) do
		Event:Connect(function()
			return Network["SuperStepper"]:Fire(Network["SuperStepper"],tick())
		end)
	end
	Network["PartOwnership"] = {};
	Network["PartOwnership"]["PreMethodSettings"] = {};
	Network["PartOwnership"]["Enabled"] = false;
	Network["PartOwnership"]["Enable"] = coroutine.create(function() --creating a thread for network stuff
		if Network["PartOwnership"]["Enabled"] == false then
			Network["PartOwnership"]["Enabled"] = true --do cool network stuff before doing more cool network stuff
			Network["PartOwnership"]["PreMethodSettings"].ReplicationFocus = LocalPlayer.ReplicationFocus
			LocalPlayer.ReplicationFocus = workspace
			Network["PartOwnership"]["PreMethodSettings"].SimulationRadius = gethiddenproperty(LocalPlayer,"SimulationRadius")
			Network["PartOwnership"]["Connection"] = Network["SuperStepper"].Event:Connect(function() --super fast asynchronous loop
				sethiddenproperty(LocalPlayer,"SimulationRadius", 0/0)
				for _,Part in pairs(Network["BaseParts"]) do --loop through parts and do network stuff
					coroutine.wrap(function()
						if Part:IsDescendantOf(workspace) then
							if Network.CharacterRelative == true then
								local Character = LocalPlayer.Character;
								if Character and Character.PrimaryPart then
									local Distance = (Character.PrimaryPart.Position - Part.Position).Magnitude
									if Distance > 1000 then
										Network["Output"].Send(warn,"PartOwnership Warning : PartOwnership not applied to BasePart "..Part:GetFullName()..", as it is more than "..gethiddenproperty(LocalPlayer,"MaximumSimulationRadius").." studs away.")
										Lost = true;
										Network["RemovePart"](Part)
									end
								else
									Network["Output"].Send(warn,"PartOwnership Warning : PartOwnership not applied to BasePart "..Part:GetFullName()..", as the LocalPlayer Character's PrimaryPart does not exist.")
								end
							end
							Part.Velocity = Network["Velocity"] * (math.random() / 2) --keep network by sending physics packets of 30 magnitude + an everchanging addition in the y level so roblox doesnt get triggered and fuck your ownership
						else
							Network["RemovePart"](Part)
						end
					end)()
				end
			end)
			Network["Output"].Send(print,"PartOwnership Output : PartOwnership enabled.")
		else
			Network["Output"].Send(warn,"PartOwnership Output : PartOwnership already enabled.")
		end
	end)
	Network["PartOwnership"]["Disable"] = coroutine.create(function()
		if Network["PartOwnership"]["Connection"] then
			Network["PartOwnership"]["Connection"]:Disconnect()
			LocalPlayer.ReplicationFocus = Network["PartOwnership"]["PreMethodSettings"].ReplicationFocus
			sethiddenproperty(LocalPlayer,"SimulationRadius",Network["PartOwnership"]["PreMethodSettings"].SimulationRadius)
			Network["PartOwnership"]["PreMethodSettings"] = {}
			for _,Part in pairs(Network["BaseParts"]) do
				Network["RemovePart"](Part)
			end
			Network["PartOwnership"]["Enabled"] = false
			Network["Output"].Send(print,"PartOwnership Output : PartOwnership disabled.")
		else
			Network["Output"].Send(warn,"PartOwnership Output : PartOwnership already disabled.")
		end
	end)
	Network["Output"].Send(print,": Loaded.")
end
coroutine.resume(Network["PartOwnership"]["Enable"])

wait()
local StarterGui = game:GetService("StarterGui")
StarterGui:SetCore("VREnableControllerModels", false)
tooldb = false
player = game:GetService("Players").LocalPlayer
Camera = workspace.CurrentCamera
mouse = player:GetMouse()
VRService = game:GetService("VRService")
folder = Instance.new("Folder", workspace)
folder.Name = "VRStuff"
player.Character.Archivable = true
clone = player.Character:Clone()
clone.Name = player.Name.." Clone"
clone.Parent = folder
player.Character.Humanoid.Health = 0
player.Character = nil
Char = nil
Camera.CameraType = Enum.CameraType.Scriptable
Camera.HeadScale = 2

function resetCamRot()
    local prev = Camera.CFrame.Rotation.Y
    Camera.CFrame = CFrame.new(Camera.CFrame.Position.X, Camera.CFrame.Position.Y, Camera.CFrame.Position.Z) * CFrame.Angles(0, prev, 0)
end

for _,Event in pairs({RunService.Stepped,RunService.Heartbeat}) do
	Event:Connect(function()
		if vbreak == true then return end
		lefthandpos = (Camera.CFrame - Camera.CFrame.p) * (VRService:GetUserCFrame(Enum.UserCFrame.LeftHand) - VRService:GetUserCFrame(Enum.UserCFrame.LeftHand).p) + Camera.CFrame*(VRService:GetUserCFrame(Enum.UserCFrame.LeftHand).p*Camera.HeadScale)
		righthandpos = (Camera.CFrame - Camera.CFrame.p) * (VRService:GetUserCFrame(Enum.UserCFrame.RightHand) - VRService:GetUserCFrame(Enum.UserCFrame.RightHand).p) + Camera.CFrame*(VRService:GetUserCFrame(Enum.UserCFrame.RightHand).p*Camera.HeadScale)
		Headpos = workspace.CurrentCamera:GetRenderCFrame()
	end)
end
for i,v in pairs(clone:GetDescendants()) do
	if v:IsA("BasePart") then
        v.Transparency = 1
		v.CanCollide = false
        v.Anchored = true
	end
	if v:IsA("BasePart") and v.Name:find("Arm") then
		v.Transparency = 0
	end
end

player.CharacterAdded:Connect(function(Character)
	wait()
	Character:SetPrimaryPartCFrame(Headpos - Headpos.UpVector * 1.5)
end)

function Join(Part0, Part1, Type)
	local method = Instance.new("RopeConstraint", player.Character.Torso)
	method.Length = math.huge
	method.Attachment0 = Instance.new("Attachment", Part0)
	method.Attachment1 = Instance.new("Attachment", Part1)
	coroutine.wrap(function()
		for _,Event in pairs({RunService.Stepped,RunService.Heartbeat}) do
			Event:Connect(function()
                if Type == "Left" then
                    Part0.CFrame = lefthandpos * CFrame.Angles(math.rad(90),0,0) - lefthandpos.LookVector * 0.65
                end
                if Type == "Right" then
                    Part0.CFrame = righthandpos * CFrame.Angles(math.rad(90),0,0) - righthandpos.LookVector * 0.65
                end
		    end)
        end
	end)()
    return method
end


local touchcon = nil
player.CharacterAppearanceLoaded:Connect(function(Character)
	if player.Character ~= nil then
		if vbreak == true then return end
		Char = Character
        resetCamRot()
		mouse.TargetFilter = Char
		Char:WaitForChild("Head").CanCollide = false
		Char:WaitForChild("Head").Transparency = 1
		Char:WaitForChild("Torso").CanCollide = false
		Char:WaitForChild("Torso").Transparency = 1
        Char.ChildAdded:Connect(function(Child)
            wait()
            if Child:IsA("Tool") and Child:FindFirstChild("Handle") then
                Network.RetainPart(Child:FindFirstChild("Handle"))
                touchcon = Child:FindFirstChild("Handle").Touched:Connect(function(Hit)
                    Child:Activate()
                    touchcon:Disconnect()
                end)
            end
        end)
        Char.ChildRemoved:Connect(function(Child)
            if Child:IsA("Tool") and Child:FindFirstChild("Handle") then
                touchcon:Disconnect()
            end
        end)
        Char["Left Arm"].Transparency = 1
        Char["Right Arm"].Transparency = 1
		Char["Left Leg"]:Destroy()
		Char["Right Leg"]:Destroy()
        hatcount = 0
        hats = {}
        for i,v in pairs(Char:GetDescendants()) do
			if v:IsA("BasePart") then
                Network.RetainPart(v)
				v.CustomPhysicalProperties = PhysicalProperties.new(0,0,0,0,0)
				v.CanCollide = false
			end
			if v:IsA("Accessory") then
				v.Handle.Transparency = 1
				if hatcount < 2 then
                    hatcount += 1
                    v.Handle:FindFirstChildWhichIsA("SpecialMesh"):Destroy()
                    v.Handle.Size = Vector3.new(1, 2, 1)
                    table.insert(hats, v.Handle)
                end
			end
		end
        Char["Left Arm"]:Destroy()
        Char["Right Arm"]:Destroy()
        local sentmsg = false
		for _,Event in pairs({RunService.Stepped,RunService.Heartbeat}) do
			Event:Connect(function()
                clone["Left Arm"].CFrame =  lefthandpos * CFrame.Angles(math.rad(90),0,0) - lefthandpos.LookVector * 0.65
                clone["Right Arm"].CFrame =  righthandpos * CFrame.Angles(math.rad(90),0,0) - righthandpos.LookVector * 0.65
                if #hats == 2 then
                    hats[1].CFrame =  lefthandpos * CFrame.Angles(math.rad(90),0,0) - lefthandpos.LookVector * 0.65
                    hats[2].CFrame =  righthandpos * CFrame.Angles(math.rad(90),0,0) - righthandpos.LookVector * 0.65
                else
                    if sentmsg == false then
                        sentmsg = true
                        game:GetService("StarterGui"):SetCore("SendNotification", {
                        	Title = "ERROR!",
                        	Text = "You dont have at least 2 hats!"
                        })
                    end
                end
                Char.Humanoid.PlatformStand = true
                if Char:FindFirstChildOfClass("Tool") then
					if Char:FindFirstChildOfClass("Tool"):FindFirstChild("Handle") and hats[2] then
                        Char:FindFirstChildOfClass("Tool"):FindFirstChild("Handle").Anchored = false
						Char:FindFirstChildOfClass("Tool"):FindFirstChild("Handle").Position = hats[2].CFrame.Position + Vector3.new(0, 0, -1)
                        Char:FindFirstChildOfClass("Tool"):FindFirstChild("Handle").Rotation = Vector3.new(0, 0, 0)
					end
                end
				Char:SetPrimaryPartCFrame(Headpos - Headpos.UpVector * 1.5)
				clone:SetPrimaryPartCFrame(Headpos - Headpos.UpVector * 1.5)
				for i,v in pairs(Char:GetDescendants()) do
					if v:IsA("Accessory") then
						v.Handle.CFrame = clone[v.Name].Handle.CFrame
					end
				end
                if Char:FindFirstChild("Animate") then
                	Char:FindFirstChild("Animate").Disabled = true
                	for _, Track in next, Char.Humanoid:GetPlayingAnimationTracks() do
                		Track:Stop()
                	end
                end
			end)
		end
	end
end)

cooldown = false
UserInputService = game:GetService("UserInputService")
UserInputService.InputChanged:Connect(function(input)
	if vbreak == true then return end
	if Char and input.KeyCode == Enum.KeyCode.Thumbstick2 and Char:FindFirstChild("Humanoid") and not Char.Humanoid.Sit then
		Camera.CFrame += righthandpos.LookVector * (input.Position.Y/2)
		Camera.CFrame += righthandpos.RightVector * (input.Position.X/2)
	end
	if Char and input.KeyCode == Enum.KeyCode.Thumbstick1 and cooldown == false and Char:FindFirstChild("Humanoid") and not Char.Humanoid.Sit then
		local angle = 30
		if -input.Position.X < 0 then
			angle = -30
		end
		Camera.CFrame *= CFrame.Angles(0,math.rad(angle),0)
		cooldown = true
		wait(0.4)
		cooldown = false
	end
    if Char and Char:FindFirstChild("Humanoid") and Char.Humanoid.Sit then
        local old = CFrame.new(Char.Head.CFrame.X, Char.Head.CFrame.Y, Char.Head.CFrame.Z) * CFrame.Angles(0, Char.Head.CFrame.Rotation.Y, 0)
        Camera.CFrame = Char.Head.CFrame
    end
end)

Camera:GetPropertyChangedSignal("CameraType"):Connect(function()
	if vbreak == true then return end
	Camera.CameraType = Enum.CameraType.Scriptable
end)